version: '3.9'

services:
  nginx-proxy:
    image: nginx:latest
    ports:
      - "8001:80"
    volumes:
      - data-web:/var/www/html
      - ./conf/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - internal_network
      - external_network
#    depends_on:
#      - web
#      - streaming
#      - sidekiq

  postgresql:
    restart: always
    image: postgres:15-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'mastodon']
    volumes:
      - db-postgresql:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
    env_file:
      - ./env/db.env

  redis:
    restart: always
    image: 'valkey/valkey:7.2-alpine'
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'valkey-cli', 'ping']
    volumes:
      - db-redis:/data

  redis-cache:
    image: 'valkey/valkey:7.2-alpine'
    restart: always
    healthcheck:
      test: ['CMD', 'valkey-cli', 'ping']
    networks:
      - internal_network

  elasticsearch:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=true
      - xpack.watcher.enabled=false
      - xpack.graph.enabled=false
      - xpack.ml.enabled=false
      - bootstrap.memory_lock=true
      - cluster.name=elasticsearch-mastodon
      - discovery.type=single-node
      - thread_pool.write.queue_size=1000
    env_file:
      - ./env/db.env
    networks:
       - internal_network
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - db-elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  web:
    image: 'tootsuite/mastodon:${MASTODON_VER}'
    restart: always
    env_file:
      - ./env/app.env
      - ./env/db.env
      - ./env/smtp.env
    command: 'bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"'
    networks:
      - internal_network
      - external_network
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    depends_on:
      - postgresql
      - redis
      - redis-cache
      - elasticsearch
    volumes:
      - data-uploads:/mastodon/public/system

  streaming:
    image: 'tootsuite/mastodon:${MASTODON_VER}'
    restart: always
    env_file:
      - ./env/app.env
      - ./env/db.env
      - ./env/smtp.env
    command: node ./streaming
    networks:
      - internal_network
      - external_network
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    depends_on:
      - postgresql
      - redis
      - redis-cache

  sidekiq:
    image: 'tootsuite/mastodon:${MASTODON_VER}'
    restart: always
    env_file:
      - ./env/app.env
      - ./env/db.env
      - ./env/smtp.env
    command: bundle exec sidekiq
    depends_on:
      - postgresql
      - redis
      - redis-cache
    networks:
      - internal_network
      - external_network
    volumes:
      - data-uploads:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

  control:
    image: 'tootsuite/mastodon:${MASTODON_VER}'
    env_file:
      - ./env/app.env
      - ./env/db.env
      - ./env/smtp.env
    command: /bin/bash
    restart: "no"
    networks:
      - internal_network
      - external_network
    volumes:
      - data-uploads:/mastodon/public/system
      - data-web:/web

networks:
  external_network:
  internal_network:
    internal: true

volumes:
  data-web:
    driver_opts:
      type: none
      device: ./data/web
      o: bind
  data-uploads:
    driver_opts:
      type: none
      device: ./data/web/system
      o: bind
  db-postgresql:
    driver_opts:
      type: none
      device: ./data/postgresql
      o: bind
  db-redis:
    driver_opts:
      type: none
      device: ./data/redis
      o: bind
  db-elasticsearch:
    driver_opts:
      type: none
      device: ./data/elasticsearch
      o: bind

